<pre>
 BIP:?
 Layer: Applications
 Title: Adding Anonymous Messaging to Peers
 Author: NÃ­ckolas Goline <n@ngoline.com>
 Comments-Summary: No comments yet.
 Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:?
 Status: Draft
 Type: Standards Track
 Created: 2020-01-13
 License: BSD-2-Clause
</pre>

== Abstract ==

This document specifies an addition to current services offered by peers to enable the exchange of anonymous messages using Bitcoin's well established peer-to-peer network.

== Copyright ==

This BIP is licensed under the BSD 2-clause license.

== Motivation ==

The addition of messaging to the Bitcoin protocol will introduce, not only a wider use for it but also a secure anonymous layer to exchange messages in.

Today there's no way of exchanging messages using all of the following three fundaments at the same time:

# Security
# Anonymity
# Spam-free environment

Any known method will fall on a chose-two scenario as follows:

=== Security + Anonymity ===

<blockquote>One can have a ''' secure ''' environment where ''' anonimity ''' is taken seriously, but anyone can create a virtually infinite number of accounts, which makes the environment prone to ''' spam '''.</blockquote>

=== Security + Spam-Free ===

<blockquote>One can have a ''' secure ''' environment where an individual can only create a set of accounts, making ''' spam ''' a risky business since you could be banned from the platform.

To achieve this you have to inform some kind of verifiable identification, which makes the system, not ''' anonymous '''.</blockquote>

=== Anonimity + Spam-Free ===

<blockquote>While we can't think of any type of communication environment that can offer this, we wouldn't like to exchange open messages nor expose my physical address to the world. This kind of environment lacks ''' security ''' and it's not what we're trying to achieve here.</blockquote>

== Specification ==

We propose that the nodes can choose to receive and broadcast a new type of message.

Participants can communicate using their Bitcoin addresses and this communication can only happen if a set of rules are met.

Below are the inner workings of this new message and the rules for it to happen.

=== Funding Transaction ===

To allow a participant to exchange messages using this protocol we require that a chosen value remain locked for a set period. This will represent a ''' funding transaction ''' for the address.

<blockquote> It worth noticing that the address is only activated if it has an active locking transaction.

Any message sent to an address that is not activated must be discarded by the receiving node.</blockquote>

The funding transaction must have a time-locked vout [[bip-0065.mediawiki]].

 <expiry time> CHECKLOCKTIMEVERIFY DROP DUP HASH160 <pubKeyHash> EQUALVERIFY CHECKSIG

This is enough to grant the owner of <code><pubKeyHash></code> a valid address for the <code><expiry time></code>.

=== Broadcasting Rules ===

In order to broadcast a message, beeing it a new message or a received message, it has to satisfy the following rules:

# Is this message originaly sent less than '' n* '' minutes ago?
# Check the recipient's '' funding transaction ''
## Does it exists?
## Is it still locked? <code><expiry time> > now '' (block height) ''</code>
# Check the sender's '' funding transaction ''
## Does it exists?
## Is it still locked? <code><expiry time> > now '' (block height) ''</code>
## Is the <code><expiry time></code> greater or equal than recipient's <code><expiry time></code>
## Is the value locked greater or equal than that of the recipient?

If the answer to any of those questions is ''' NO ''' the message must be discarded.

If all the answers are ''' YES ''' and you're not the recipient of the message you must broadcast it for all your peers.

'' * The value of ''' n ''' should be decided by the community but anything bigger than the average block time should be avoided.''

=== Message ===

Exchanged messages should pose no overhead for the network or its nodes. With this in mind, a message can only have up to 350 bytes in total.

Following is the proposed message composition:

* message: 350 bytes
** header: ~94-134 bytes
*** sent on: 8 bytes
*** recipient: ~47-67 bytes
**** address: 40 bytes (bech32)
**** funding block: 1-9 bytes '' (varint) ''
**** funding txn: 1-9 bytes '' (varint) ''
**** funding vout: 1-9 bytes '' (varint) ''
*** recipient: ~47-67 bytes
**** address: 40 bytes (bech32)
**** funding block: 1-9 bytes '' (varint) ''
**** funding txn: 1-9 bytes '' (varint) ''
**** funding vout: 1-9 bytes '' (varint) ''
** body: ~204-244 bytes
*** message: ~204-244 bytes
** footer: 4 bytes
*** crc32: 4 bytes

==== Message Specifics ====

The header contains data regarding the locking transactions for each participant in the message exchange.

We propose using block height and transaction position inside the block to allow for a smaller header.

Considering adoption after block 612800 (varint FE00C05909 = 5 bytes), the message body could range from 212 to 252 bytes depending on the position of the transaction inside the block and the locking vout position.

The <code>sent on</code> field of the message is a Unix timestamp from the sender.

The body's message must be encrypted using the recipient's Public Key.

==Rationale==

Current communications always lack at least one of the three fundamentals of a secure, anonymous and spam-free environment.

We can use the Bitcoin protocol to perform secure and anonymous communication with almost no overhead for the nodes while also achieving the holy grail of communications having a virtually spam-free (or at least very expensive for spammers) environment.

==Reference implementation==

TBD
